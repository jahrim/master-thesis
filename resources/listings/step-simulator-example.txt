// Creation
object Incarnation extends SimulationIncarnation:
  override type Environment = environment.Environment
object Simulator extends StepSimulator, WithIncarnation(Incarnation):
  override type Configuration[A] = StepSimulationConfiguration[A]
import Simulator.incarnation.{*, given}

// Configuration
val configuration = Simulator.StepSimulationConfiguration[DeviceId](
  environment = environment.Environment.euclideanGrid(cols = 3, rows = 3),
  haltPolicy = Simulator.HaltPolicy.haltOnVainStep,
  logger = Logger.NoOperation,
)
val simulation = Simulator.simulation[DeviceId](mid)(using configuration)

// Preparation
simulation.exportedSteps.listen(step => println(step))
simulation.termination.onComplete(_ => println("END"))

// Execution
simulation.start()
while(simulation.isRunning){ simulation.next() }