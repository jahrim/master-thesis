class GradientTest extends AnyFlatSpec with Matchers with ConvergenceTest:
  object Incarnation
    extends SimulationIncarnation with CommonSensors with CommonAlgorithms:
    override type Environment = EnvironmentWithTags
  object Simulator
    extends ConvergenceSimulator.StepSimulator, WithIncarnation(Incarnation):
    override type Configuration[A] = StepSimulationConfiguration[A]
  import Simulator.incarnation.{*, given}
  given configurationSupplier[A]: () => Simulator.Configuration[A] = () =>
    Simulator.StepSimulationConfiguration[A](
      environment = EnvironmentWithTags(euclideanGrid(cols = 5, rows = 5)).tag(
        tag = SourceTag, 
        devices = Set(0)
      ),
      haltPolicy = Simulator.HaltPolicy.haltOnVainStep,
    )

  "The gradient specification" should
  "compute the field of distances from a source" in
  convergenceTest(
    simulator = Simulator,
    flow = gradient(sources = sensor(Source)),
    limit = Map(
      0 ->  0.00,  1 -> 1.00,  2 -> 2.00,  3 -> 3.00,  4 -> 4.00,
      5 ->  1.00,  6 -> 1.41,  7 -> 2.41,  8 -> 3.41,  9 -> 4.41,
      10 -> 2.00, 11 -> 2.41, 12 -> 2.83, 13 -> 3.83, 14 -> 4.83,
      15 -> 3.00, 16 -> 3.41, 17 -> 3.83, 18 -> 4.24, 19 -> 5.24,
      20 -> 4.00, 21 -> 4.41, 22 -> 4.83, 23 -> 5.24, 24 -> 5.66,
    ),
    expectation = Expectation.Convergent,
    repetitions = 10,
    timeout = 60.seconds,
  )
